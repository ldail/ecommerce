{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Leon\\\\Documents\\\\programming\\\\ecommerce-begin\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchCollectionsAsync),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchCollectionsStart);\n\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsFailure, fetchCollectionsSuccess } from './shop-actions';\nimport ShopActionTypes from './shop-types';\nexport function fetchCollectionsAsync() {\n  var collectionRef, snapshot, collectionsMap;\n  return _regeneratorRuntime.wrap(function fetchCollectionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return console.log('I am fired');\n\n        case 2:\n          _context.prev = 2;\n          collectionRef = firestore.collection('collections');\n          _context.next = 6;\n          return collectionRef.get();\n\n        case 6:\n          snapshot = _context.sent;\n          _context.next = 9;\n          return call(convertCollectionSnapshotToMap, snapshot);\n\n        case 9:\n          collectionsMap = _context.sent;\n          _context.next = 12;\n          return put(fetchCollectionsSuccess(collectionsMap));\n\n        case 12:\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](2);\n          _context.next = 18;\n          return put(fetchCollectionsFailure(_context.t0.message));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 14]]);\n}\nexport function fetchCollectionsStart() {\n  return _regeneratorRuntime.wrap(function fetchCollectionsStart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Users/Leon/Documents/programming/ecommerce-begin/src/redux/shop/shop-sagas.js"],"names":["fetchCollectionsAsync","fetchCollectionsStart","takeEvery","call","put","firestore","convertCollectionSnapshotToMap","fetchCollectionsFailure","fetchCollectionsSuccess","ShopActionTypes","console","log","collectionRef","collection","get","snapshot","collectionsMap","message","FETCH_COLLECTIONS_START"],"mappings":";;;;yBAOiBA,qB;;;yBAcAC,qB;;AArBjB,SAAQC,SAAR,EAAmBC,IAAnB,EAAyBC,GAAzB,QAAmC,oBAAnC;AACA,SAAQC,SAAR,EAAmBC,8BAAnB,QAAwD,+BAAxD;AAEA,SAAQC,uBAAR,EAAiCC,uBAAjC,QAA+D,gBAA/D;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,SAAUT,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMU,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AADK;AAAA;AAGGC,UAAAA,aAHH,GAGmBP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAHnB;AAAA;AAKc,iBAAMD,aAAa,CAACE,GAAd,EAAN;;AALd;AAKGC,UAAAA,QALH;AAAA;AAMoB,iBAAMZ,IAAI,CAACG,8BAAD,EAAiCS,QAAjC,CAAV;;AANpB;AAMGC,UAAAA,cANH;AAAA;AAOH,iBAAMZ,GAAG,CAACI,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;;AAPG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUH,iBAAMZ,GAAG,CAACG,uBAAuB,CAAC,YAAMU,OAAP,CAAxB,CAAT;;AAVG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcP,OAAO,SAAUhB,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMC,SAAS,CAACO,eAAe,CAACS,uBAAjB,EAA0ClB,qBAA1C,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {takeEvery, call, put} from 'redux-saga/effects';\r\nimport {firestore, convertCollectionSnapshotToMap} from '../../firebase/firebase.utils';\r\n\r\nimport {fetchCollectionsFailure, fetchCollectionsSuccess} from './shop-actions'\r\n\r\nimport ShopActionTypes from './shop-types';\r\n\r\nexport function* fetchCollectionsAsync() {\r\n  yield console.log('I am fired');\r\n  try {\r\n    const collectionRef = firestore.collection('collections');\r\n\r\n    const snapshot = yield collectionRef.get();\r\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\r\n    yield put(fetchCollectionsSuccess(collectionsMap));\r\n  }\r\n  catch(error) { \r\n    yield put(fetchCollectionsFailure(error.message))\r\n  }\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\r\n}"]},"metadata":{},"sourceType":"module"}